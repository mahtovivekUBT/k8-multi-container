sudo: required       # because we are making use of docker
services:
  # to be pre install as we try to run our build, because we travis build our images and even run the test containers
  - docker
env:
  global:
    - SHA=$(git rev-parse HEAD)  # Will give the current commit og the GIT_SHA and assign it to SHA, it will be used in deploy.sh
    - CLOUDSDK_CORE_DISABLE_PROMPTS=1  # It will not show any prompts by google like enter yes/no
before_install:
  # Following command, we get after encrypting the service-account.json file through travis CLI, inside ruby docker
  # Encrypted file is commited to the github, this command will let travis know how to decrypt the file
  - openssl aes-256-cbc -K $encrypted_9f3b5599b056_key -iv $encrypted_9f3b5599b056_iv -in service-account.json.enc -out service-account.json -d
  # The > operator redirects the output usually to a file but it can be to a device
  # /dev/null is the null device it takes any input you want and throws it away. It can be used to suppress any output.
  # THis command will download and install googel SDK
  - curl https://sdk.cloud.google.com | bash > /dev/null;
  - source $HOME/google-cloud-sdk/path.bash.inc
  # Install the kubectl command to manipulate the kubernetes cluster on GCP
  - gcloud components update kubectl
  # Authorization with google cloud
  # To give access to the GCP Kubernetes we need a activate-service-account and provide key to give access in json file
  # It is exactly like IAM account we had to create in case of AWS, when we had to give travis access to AWS(programmatically)
  - gcloud auth activate-service-account --key-file service-account.json
  # Which project to work on? Get project ID from GCP
  - gcloud config set project refined-rookery-359414
  - gcloud config set compute/zone europe-west3-a
  # Will tell the Google CLI to work on specific cluster
  - gcloud container clusters get-credentials multi-cluster
  - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
  - docker build -t mahtovivek741/react-test -f ./client/Dockerfile.dev ./client

script:
  - docker run -e CI=true mahtovivek741/react-test npm test

deploy:
  # There is no built in provider for Kubernetes, therefore we have to do it ourselves
  # In case of AWS it was AWSBeanStalk, Travis here knows how to deploy to AWS but doesn't know with Kubernetes
  # Therefore the provider here is a script and in that script we will write the commands which will tell Travis just to run these commands
  provider: script
  script: bash ./deploy.sh     # Just run the command we will take care of deployment
  on:
    branch: master   # Only execute the script, if working on master branch